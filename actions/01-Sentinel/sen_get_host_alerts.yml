Name: Get Alerts on Hosts
ID: SEN_Host_Alerts
Description: Gets all alerts from Sentinel, checks the status and marks the hosts or users as compromised in Neo4j.
Author: FalconForce
Version: '1.0'
Info: |-
Active: true                                                # Enable to run this action
Debug: false                                                 # Enable to see query results in the console
SourcePlatform: Sentinel                                    # Sentinel, Watchlist, Neo4j, CSV, MDE, Graph, Splunk
Query: |
    let timeframe = 15m;
    SecurityAlert
    | where ingestion_time() >= ago(timeframe)
    | extend EntitiesDynamicArray=parse_json(Entities) | mvexpand EntitiesDynamicArray
    | extend Entitytype=tostring(parse_json(EntitiesDynamicArray).Type)
    | where Entitytype=='host'
    | extend FQDN=tostring(parse_json(EntitiesDynamicArray).FQDN), HostName=parse_json(EntitiesDynamicArray).HostName, DnsDomain=tostring(parse_json(EntitiesDynamicArray).DnsDomain)
    | extend FQDN2=strcat(HostName,".",DnsDomain)  // Sometimes the FQDN is not populated for some reason, so we can fix most this way.
    | extend EntityName=iff(isnotempty(FQDN),FQDN,FQDN2)
    | project EntityName,AlertId=VendorOriginalId,Entitytype,ProviderName, Status
    | summarize make_set(AlertId) by Entitytype,DeviceName=EntityName,Status, ProviderName
    //| where not((Entitytype == 'host' and EntityName !contains '.') or EntityName endswith ".")  // Optional. Filters non-domain joined hosts and incomplete hostnames.
    | mv-expand set_AlertId
Targets:                                                   # Targets are the platforms that this action will push to (CSV, Neo4j, Sentinel, Wachlist, Slack, Teams, Splunk, Markdown)
  - Name: Neo4j
    Enabled: true
    Query: |
      WITH $set_AlertId AS alertId, toUpper($EntityName) AS entityName, $Status AS status
      MATCH (c)
      WHERE c.name = entityName AND (c:Computer OR c:AZVM)
      SET c.alertid = (CASE WHEN status = 'New' AND NOT alertId IN coalesce(c.alertid, []) THEN coalesce(c.alertid, []) + [alertId] WHEN status = 'Resolved' THEN [val IN c.alertid WHERE val <> alertId] ELSE c.alertid END), 
      c.owned = True
    Parameters:
      set_AlertId: set_AlertId
      EntityName: DeviceName
      Status: Status